{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Fatigue Monitoring System (FaMS) The FaMS component detects possible psychological (e.g., loss of attention, mental fatigue) or physical (e.g., tiredness) discomfort or harmful situations for a worker. The situations identified by this component can be targeted by other modules to trigger short term intervention, i.e., intervention that can be executed to support a specific worker during the current working shift. Examples of possible interventions include: providing visual support by highlighting which component is the next one to assemble, or where to insert a connector; increasing the support provided by the exoskeleton; taking a break; shut-down all information. Contents Home Getting Started User & Programmers Manual Architecture User Manual Installation & Administration Manual Installation Guide Authors Vincenzo Cutrona - vincenzo.cutrona@supsi.ch Acknowledgement H2020 Innovation Action -- This project has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 951813.","title":"Home"},{"location":"index.html#fatigue-monitoring-system-fams","text":"The FaMS component detects possible psychological (e.g., loss of attention, mental fatigue) or physical (e.g., tiredness) discomfort or harmful situations for a worker. The situations identified by this component can be targeted by other modules to trigger short term intervention, i.e., intervention that can be executed to support a specific worker during the current working shift. Examples of possible interventions include: providing visual support by highlighting which component is the next one to assemble, or where to insert a connector; increasing the support provided by the exoskeleton; taking a break; shut-down all information.","title":"Fatigue Monitoring System (FaMS)"},{"location":"index.html#contents","text":"Home Getting Started User & Programmers Manual Architecture User Manual Installation & Administration Manual Installation Guide","title":"Contents"},{"location":"index.html#authors","text":"Vincenzo Cutrona - vincenzo.cutrona@supsi.ch","title":"Authors"},{"location":"index.html#acknowledgement","text":"H2020 Innovation Action -- This project has received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement No 951813.","title":"Acknowledgement"},{"location":"architecture.html","text":"Architecture Within the Better Factory project, the FaMS is deployed as part of the Cognitive Human Robot Interaction (C-HRI) scenario. The deployment is based on Docker Compose, and the set of initialized components is depicted in the picture here below: flowchart LR classDef supsi fill:#B4C7DC,color:#000; classDef pvt fill:#B2B2B2,color:#000; classDef pub fill:#E8F2A1,color:#000; subgraph SUPSI direction TB fams:::supsi <--> middleware:::supsi kafka-message-model:::supsi --> middleware:::supsi end subgraph Private Deps models:::pvt <--> fams:::supsi end subgraph Public Deps models:::pvt <--> models-db:::pub end The blue-colored components represent the core components for which SUPSI provides and maintains a Docker image; the other components represent Docker images that are either publicly available (green-colored) or maintened by other Better Factory partners (grey-colored). Info In this deployment version, all the Docker images but the public ones can be downloaded from the RAMP Docker Registry . Dependencies middleware The image is based on the fast-data-dev (v2.6.2) project by Lenses.io and runs a full fledged Kafka installation (including extra services, e.g., UIs). In addition, the Schema Registry is automatically populated with schemas available under the /schemas directory. In our deployment, the /schemas directory is read from the kafka-message-model component. The middleware is run in secure mode and can be accessed at localhost:3040 (credentials are stored in the docker-compose file). kafka-message-model This component embeds the data model shared within the Better Factory project. The data model is automatically uploaded to the Schema Registry available within the middleware . models The models component exposes a REST API to access the data model shared among all the components involved in the C-HRI scenario. The API is accessed by the fams component to fetch information about workers and other factory elements. models-db The models-db component runs an official MySql docker image (v5.7).","title":"Architecture"},{"location":"architecture.html#architecture","text":"Within the Better Factory project, the FaMS is deployed as part of the Cognitive Human Robot Interaction (C-HRI) scenario. The deployment is based on Docker Compose, and the set of initialized components is depicted in the picture here below: flowchart LR classDef supsi fill:#B4C7DC,color:#000; classDef pvt fill:#B2B2B2,color:#000; classDef pub fill:#E8F2A1,color:#000; subgraph SUPSI direction TB fams:::supsi <--> middleware:::supsi kafka-message-model:::supsi --> middleware:::supsi end subgraph Private Deps models:::pvt <--> fams:::supsi end subgraph Public Deps models:::pvt <--> models-db:::pub end The blue-colored components represent the core components for which SUPSI provides and maintains a Docker image; the other components represent Docker images that are either publicly available (green-colored) or maintened by other Better Factory partners (grey-colored). Info In this deployment version, all the Docker images but the public ones can be downloaded from the RAMP Docker Registry .","title":"Architecture"},{"location":"architecture.html#dependencies","text":"","title":"Dependencies"},{"location":"architecture.html#middleware","text":"The image is based on the fast-data-dev (v2.6.2) project by Lenses.io and runs a full fledged Kafka installation (including extra services, e.g., UIs). In addition, the Schema Registry is automatically populated with schemas available under the /schemas directory. In our deployment, the /schemas directory is read from the kafka-message-model component. The middleware is run in secure mode and can be accessed at localhost:3040 (credentials are stored in the docker-compose file).","title":"middleware"},{"location":"architecture.html#kafka-message-model","text":"This component embeds the data model shared within the Better Factory project. The data model is automatically uploaded to the Schema Registry available within the middleware .","title":"kafka-message-model"},{"location":"architecture.html#models","text":"The models component exposes a REST API to access the data model shared among all the components involved in the C-HRI scenario. The API is accessed by the fams component to fetch information about workers and other factory elements.","title":"models"},{"location":"architecture.html#models-db","text":"The models-db component runs an official MySql docker image (v5.7).","title":"models-db"},{"location":"getting-started.html","text":"Getting Started The FaMS and its dependencies are provided as Dockerized applications. To start the FaMS and its dependencies, issue the up command: docker-compose up -d The FaMS is a backend application working over Apache Spark, thus a proper UI is not provided. When new physiological data come, the predicted fatigue level is published on the middleware.","title":"Getting Started"},{"location":"getting-started.html#getting-started","text":"The FaMS and its dependencies are provided as Dockerized applications. To start the FaMS and its dependencies, issue the up command: docker-compose up -d The FaMS is a backend application working over Apache Spark, thus a proper UI is not provided. When new physiological data come, the predicted fatigue level is published on the middleware.","title":"Getting Started"},{"location":"installationguide.html","text":"Installation Guide Requirements All the components are provided as Dockerized applications, thus the following software is required: Docker Docker Compose Info We tested our deployment on machines running different configurations: Ubuntu 21, Docker 20.10.8, Docker Compose 1.29.2 Ubuntu 22, Docker 24.0.5, Docker Compose 2.20.2 Install Before running the containers, it is required to download the Docker images from their respective registries. While some images are publicly available, some other require credentials to be downloaded from private registries. Faq Images can be download from the RAMP Docker registry, which supports the token-based authentication. Please send your request for a new token to the RAMP Docker registry maintainers. Once you are provided with a username and a token, you can issue the following command to login to the RAMP Docker registry and download the images: docker login docker.ramp.eu -u <username> -p <token> docker-compose pull <image>:<tag> Usage The docker-compose file automatically runs all the components as Docker containers. Each container can be customized by editing its environment parameters. The current deployment already set the right values for all the parameters. We suggest the user to only modify variables listed in the .env file, if needed. Parameter name Parameter value Default BF_USER A username shared by all the components bfuser BF_PASSWORD A password shared by all the components bfpwd123 MODELS_MYSQL_DATABASE Name of the database to store the shared model models MODELS_MYSQL_ROOT_PASSWORD Password for the root user in MySQL root Run the up command to start all the containers: docker-compose up -d You can now access different components: Kafka is accessible from the Kafka Development Environment, which is available at localhost:3040 . Here you can check schemas uploaded to the Schema Registry, as well as existing Kafka topics and their content. Software Maintainers Vincenzo Cutrona - vincenzo.cutrona@supsi.ch Giuseppe Landolfi - giuseppe.landolfi@supsi.ch","title":"Installation Guide"},{"location":"installationguide.html#installation-guide","text":"","title":"Installation Guide"},{"location":"installationguide.html#requirements","text":"All the components are provided as Dockerized applications, thus the following software is required: Docker Docker Compose Info We tested our deployment on machines running different configurations: Ubuntu 21, Docker 20.10.8, Docker Compose 1.29.2 Ubuntu 22, Docker 24.0.5, Docker Compose 2.20.2","title":"Requirements"},{"location":"installationguide.html#install","text":"Before running the containers, it is required to download the Docker images from their respective registries. While some images are publicly available, some other require credentials to be downloaded from private registries. Faq Images can be download from the RAMP Docker registry, which supports the token-based authentication. Please send your request for a new token to the RAMP Docker registry maintainers. Once you are provided with a username and a token, you can issue the following command to login to the RAMP Docker registry and download the images: docker login docker.ramp.eu -u <username> -p <token> docker-compose pull <image>:<tag>","title":"Install"},{"location":"installationguide.html#usage","text":"The docker-compose file automatically runs all the components as Docker containers. Each container can be customized by editing its environment parameters. The current deployment already set the right values for all the parameters. We suggest the user to only modify variables listed in the .env file, if needed. Parameter name Parameter value Default BF_USER A username shared by all the components bfuser BF_PASSWORD A password shared by all the components bfpwd123 MODELS_MYSQL_DATABASE Name of the database to store the shared model models MODELS_MYSQL_ROOT_PASSWORD Password for the root user in MySQL root Run the up command to start all the containers: docker-compose up -d You can now access different components: Kafka is accessible from the Kafka Development Environment, which is available at localhost:3040 . Here you can check schemas uploaded to the Schema Registry, as well as existing Kafka topics and their content.","title":"Usage"},{"location":"installationguide.html#software-maintainers","text":"Vincenzo Cutrona - vincenzo.cutrona@supsi.ch Giuseppe Landolfi - giuseppe.landolfi@supsi.ch","title":"Software Maintainers"},{"location":"usermanual.html","text":"User Manual Warning Section under construction","title":"User Manual"},{"location":"usermanual.html#user-manual","text":"Warning Section under construction","title":"User Manual"}]}